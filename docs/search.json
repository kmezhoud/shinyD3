[{"path":[]},{"path":"https://kmezhoud.github.io/shinyD3/articles/barplot.html","id":"ui-r","dir":"Articles","previous_headings":"The structure of files","what":"ui.R","title":"ShinyD3 - A Barplot.js warpper to Shiny App (own data)","text":"","code":"library(shiny)  # Define UI for application that draws a histogram fluidPage(      #Bring in the style sheet from the www folder   tags$head(tags$link(rel = \"stylesheet\",                        type = \"text/css\", href = \"style.css\")),      #Tell shiny what version of d3 we want   tags$script(src='//d3js.org/d3.v3.min.js'),         # Application title   titlePanel(\"D3 and R, a match made in heaven\"),      # Sidebar with a slider input for number of bins   sidebarLayout(     sidebarPanel(              #Dropdown list with the vehicle classes         selectInput(inputId = \"vehicleClass\",                   label = 'Select a Vehicle Class',                   choices = c('','compact', 'midsize', 'suv',                                '2seater', 'minivan', 'pickup', 'subcompact'),                   selected = ''       )            ),          # Show a plot of the generated distribution     mainPanel(       #The d3 graph       uiOutput(\"d3\")            )   ) )"},{"path":"https://kmezhoud.github.io/shinyD3/articles/barplot.html","id":"server-r","dir":"Articles","previous_headings":"The structure of files","what":"server.R","title":"ShinyD3 - A Barplot.js warpper to Shiny App (own data)","text":"","code":"library(shiny)  # Define server logic required to draw a histogram function(input, output, session) {      #Lets look for changes in our vehicle class dropdown then crunch the data and serve it to D3   observeEvent(input$vehicleClass, {          #Use tidyverse to slice the data based on the drop down input     dfMpg <- mpg %>%        filter(class == input$vehicleClass) %>%        group_by(manufacturer) %>%        mutate(avgCity = mean(cty)) %>%        select(manufacturer, avgCity) %>%        unique() %>%        rename(name = manufacturer, value = avgCity)          #Convert the tibble to json     jsonMpg <- toJSON(dfMpg, pretty=TRUE)          #Send that json from the session to our javascript     session$sendCustomMessage(type=\"jsondata\",jsonMpg)        }, ignoreNULL = FALSE,ignoreInit = FALSE)      #This tells shiny to run our javascript file \"script.js\" and send it to the UI for rendering   output$d3<- renderUI({     HTML('<script type=\"text/javascript\", src=\"script.js\">  <\/script>')   })    }"},{"path":"https://kmezhoud.github.io/shinyD3/articles/barplot.html","id":"wwwstlyse-css","dir":"Articles","previous_headings":"The structure of files","what":"www/stlyse.css","title":"ShinyD3 - A Barplot.js warpper to Shiny App (own data)","text":"","code":"body { font: 10px sans-serif; }  .bar rect { fill: steelblue; }  .bar text.value { fill: white; }  .axis { shape-rendering: crispEdges; }  .axis path { fill: none; }  .x.axis line { stroke: #fff; stroke-opacity: .8; }  .y.axis path { stroke: black; }"},{"path":"https://kmezhoud.github.io/shinyD3/articles/barplot.html","id":"wwwscript-js","dir":"Articles","previous_headings":"The structure of files","what":"www/script.js","title":"ShinyD3 - A Barplot.js warpper to Shiny App (own data)","text":"","code":"//Wrap the entire D3 script in this function. It is looking for a jsondata message sent from Shinys server session object. Shiny.addCustomMessageHandler('jsondata', function(message) {     //Lets nuke out any thing on our page with the id of \"d3Graph\". This will prevent      //our app from making a new graph each time a parameter is changed     d3.select(\"#d3Graph\").remove();      //The message comes from shiny, it is the json payload from our session     var data = message;      //Set the margin, width, and height of the D3 SVG     var m = [30, 10, 10, 100],         w = 960 - m[1] - m[3],         h = 600 - m[0] - m[2];      var format = d3.format(\",.0f\");      //Set the axis     var x = d3.scale.linear().range([0, w]),         y = d3.scale.ordinal().rangeRoundBands([0, h], .1);      var xAxis = d3.svg.axis().scale(x).orient(\"top\").tickSize(-h),         yAxis = d3.svg.axis().scale(y).orient(\"left\");//.tickSize(0);      //This is the shell of the SVG. It gets the id of \"d3Graph\". Every time this script is called     //it will nuke out any svg named d3graph and create a new one.          var svg = d3.select(\"body\").append(\"svg\")         .attr(\"width\", w + m[1] + m[3])         .attr(\"height\", h + m[0] + m[2])         .attr(\"id\", \"d3Graph\")         .append(\"g\")         .attr(\"transform\", \"translate(\" + m[3] + \",\" + m[0] + \")\");      //We have a d3 graph, but we need to bind data to it.      data.forEach(function(d) {         d.name  =  d.name;         d.value = +d.value;       });      data.sort(function(a, b) { return b.value - a.value; });      //Set the scale.     x.domain([0, d3.max(data, function(d) { return d.value; })]);     y.domain(data.map(function(d) { return d.name; }));      //Make the chart     var bar = svg.selectAll(\"g.bar\")         .data(data)         .enter().append(\"g\")         .attr(\"class\", \"bar\")         .attr(\"transform\", function(d) { return \"translate(0,\" + y(d.name) + \")\"; });      bar.append(\"rect\")         .attr(\"width\", function(d) { return x(d.value); })         .attr(\"height\", y.rangeBand());      //Labels are good.              bar.append(\"text\")         .attr(\"class\", \"value\")         .attr(\"x\", function(d) { return x(d.value); })         .attr(\"y\", y.rangeBand() / 2)         .attr(\"dx\", -3)         .attr(\"dy\", \".35em\")         .attr(\"text-anchor\", \"end\")         .text(function(d) { return format(d.value); });      svg.append(\"g\")         .attr(\"class\", \"x axis\")         .call(xAxis);      svg.append(\"g\")         .attr(\"class\", \"y axis\")         .call(yAxis); });"},{"path":[]},{"path":"https://kmezhoud.github.io/shinyD3/articles/force_network.html","id":"style-css","dir":"Articles","previous_headings":"","what":"style.css","title":"ShinyD3 - A force_network.js warpper to Shiny App","text":"","code":".node {     fill: #ccc;     stroke: #fff;     stroke-width: 2px; }  .link {     stroke: #777;     stroke-width: 2px; }"},{"path":"https://kmezhoud.github.io/shinyD3/articles/force_network.html","id":"force_network-js","dir":"Articles","previous_headings":"","what":"force_network.js","title":"ShinyD3 - A force_network.js warpper to Shiny App","text":"","code":"var width = 640,     height = 480;  var nodes = [     { x:   width/3, y: height/2 },     { x: 2*width/3, y: height/2 } ];  var links = [     { source: 0, target: 1 } ];  var svg = d3.select('body').append('svg')     .attr('width', width)     .attr('height', height);  var force = d3.layout.force()     .size([width, height])     .nodes(nodes)     .links(links);  force.linkDistance(width/2);  var link = svg.selectAll('.link')     .data(links)     .enter().append('line')     .attr('class', 'link');  var node = svg.selectAll('.node')     .data(nodes)     .enter().append('circle')     .attr('class', 'node'); force.on('end', function() {     node.attr('r', width/25)         .attr('cx', function(d) { return d.x; })         .attr('cy', function(d) { return d.y; });     link.attr('x1', function(d) { return d.source.x; })         .attr('y1', function(d) { return d.source.y; })         .attr('x2', function(d) { return d.target.x; })         .attr('y2', function(d) { return d.target.y; }); }); force.start();"},{"path":"https://kmezhoud.github.io/shinyD3/articles/force_network.html","id":"ui-r","dir":"Articles","previous_headings":"","what":"ui.R","title":"ShinyD3 - A force_network.js warpper to Shiny App","text":"","code":"library(shiny)  shinyUI(   fluidPage(     tags$head(       #Tell shiny what version of d3 we want       tags$script(src='//d3js.org/d3.v3.min.js')       ),       #includeScript(\"d3.min.js\")),                   includeCSS('style.css'),                   mainPanel(uiOutput(\"chart\")) ))"},{"path":"https://kmezhoud.github.io/shinyD3/articles/force_network.html","id":"server-r","dir":"Articles","previous_headings":"","what":"server.R","title":"ShinyD3 - A force_network.js warpper to Shiny App","text":"","code":"library(shiny)  shinyServer(function(input, output) {   output$chart <- renderUI({     includeScript('force_network.js')   })        # stop app if session is ended   session$onSessionEnded(function() {     stopApp()     print(\" force network session is ended!\")   }) })"},{"path":"https://kmezhoud.github.io/shinyD3/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Karim Mezhoud. Maintainer.","code":""},{"path":"https://kmezhoud.github.io/shinyD3/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mezhoud K (2023). shinyD3: D3 Wrapper Shiny App. R package version 0.99.10, https://github.com/kmezhoud/shinyD3.","code":"@Manual{,   title = {shinyD3: D3 Wrapper to Shiny App},   author = {Karim Mezhoud},   year = {2023},   note = {R package version 0.99.10},   url = {https://github.com/kmezhoud/shinyD3}, }"},{"path":"https://kmezhoud.github.io/shinyD3/index.html","id":"shinyd3-a-d3js-wrapper-to-shiny-app-","dir":"","previous_headings":"","what":"D3 Wrapper to Shiny App","title":"D3 Wrapper to Shiny App","text":"useful resources Wrap D3 R: R2D3 shiny.gosling","code":""},{"path":"https://kmezhoud.github.io/shinyD3/reference/shinyD3.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch shinyD3 with default browser — shinyD3","title":"Launch shinyD3 with default browser — shinyD3","text":"Launch shinyD3 default browser","code":""},{"path":"https://kmezhoud.github.io/shinyD3/reference/shinyD3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch shinyD3 with default browser — shinyD3","text":"","code":"shinyD3(example)"},{"path":"https://kmezhoud.github.io/shinyD3/reference/shinyD3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch shinyD3 with default browser — shinyD3","text":"example  valid string example visualization","code":""},{"path":"https://kmezhoud.github.io/shinyD3/reference/shinyD3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch shinyD3 with default browser — shinyD3","text":"shiny app D3 library launched web page","code":""},{"path":"https://kmezhoud.github.io/shinyD3/reference/shinyD3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Launch shinyD3 with default browser — shinyD3","text":"","code":"if(interactive()){ shinyD3(example= \"barplot\") }"},{"path":"https://kmezhoud.github.io/shinyD3/reference/valid_examples.html","id":null,"dir":"Reference","previous_headings":"","what":"Valid Examples — valid_examples","title":"Valid Examples — valid_examples","text":"Valid Examples","code":""},{"path":"https://kmezhoud.github.io/shinyD3/reference/valid_examples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valid Examples — valid_examples","text":"","code":"valid_examples"},{"path":"https://kmezhoud.github.io/shinyD3/reference/valid_examples.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Valid Examples — valid_examples","text":"object class character length 2.","code":""},{"path":"https://kmezhoud.github.io/shinyD3/news/index.html","id":"shinyd3-09910","dir":"Changelog","previous_headings":"","what":"shinyD3 0.99.10","title":"shinyD3 0.99.10","text":"Introduce multiple examples","code":""},{"path":"https://kmezhoud.github.io/shinyD3/news/index.html","id":"shinyd3-09901","dir":"Changelog","previous_headings":"","what":"shinyD3 0.99.01","title":"shinyD3 0.99.01","text":"Introduce first example","code":""},{"path":"https://kmezhoud.github.io/shinyD3/news/index.html","id":"shinyd3-0990","dir":"Changelog","previous_headings":"","what":"shinyD3 0.99.0","title":"shinyD3 0.99.0","text":"shiny app first example","code":""}]
